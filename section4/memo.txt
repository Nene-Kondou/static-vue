①プロパティ値のバリデーション
    属性の名前と、その値のタイプを指定することで、それ以外の値が入らないようにチェックできる
    props: {
        title: String,
        msg: String
    }
    propsの値に設定されているタイプは、「タイプ以外の値を代入するとエラーが発生する」というものではない
    Vue3にはpropsで使われるあたいに関する細かな設定項目が用意されている
    ・required: 真偽地
        required: trueおすると、その項目をコンポーネント・タグに必ず属性として用意しなければならない。
    ・default: 値
        項目が省略されたときのデフォルト値。
        テキスト、数値、真偽地などは直接値を記述して指定すればいいが、配列やオブジェクトなどを設定する場合はオブジェクトを返す関数として指定する必要がある
    ・validator: 関数(値)
        値の検証を行う処理を指定するためのもの。引数を1つ持った関数を値として用意する。
        引数は設定された値が渡される。
    ②
    ・value == parseInt( value )
        valueと、valueを整数に変換したものが等しいか。
    ・value >= 0
        valueがゼロと等しいか、またはそれより大きいか
    ・value <= 100
        valueが100と等しいか、またはそれより小さいか

④Getter Setter 算出プロパティで値を読み書きするための処理
    getは値を取り出すためのもの(Getter)　関数内でreturnすると値が得られる。
    setは値を設定するためのもの(Seter) 引数を1つ持っており、設定された値が渡される
    computed: {
        プロパティ: {
            get() {
                ..Getterの処理..
            },
            set(引数) {
                ..Setterの処理..
            }
        },
    }
    この時のvalはまだ直接画面に表示されていない。あくまで内部で利用する値。
    aのgetではthis.valを2倍の値にしている。setでは設定された2分の1の整数値をthis.valに設定している。
    bのgetではthis.valの2乗を返す。setでは値のルート2の整数部分をthis.valに設定している。
    どちらの値もdataに用意されているvalの値値を元に設定していく。

⑤watch
    1つの値を操作して複数の値を一斉に更新する処理は、算出プロパティやイベントを使って設定もできるがウォッチャが適している。
    ウォッチャの値はオブジェクトになっており、監視する値の名前と、その値が更新された時に実行されるメソッドを用意する。
    watch: {
        名前( newVal, oldVal ) { ..処理.. },
        名前( newVal, oldVal ) { ..処理.. },
    }

⑥イベントの修飾子　v-XX
    イベント関係の処理の割り当てはv-onを使って設定する。
    予めmethodsに関数を用意しておき、v-onで割り当てることで、イベントが発生するとその処理を実行できるようにする。
    v-on:イベント名.修飾子="〇〇"
    修飾子
    .stop ... イベントの伝搬をそこで停止
    .prevent ... イベントのデフォルトのアクションを停止
    .capture ... イベントをキャプチャーする（途中で別のイヴェントを発火させたりするのに使う）
    .self ... 自身がイベントの発生源であるときだけ発火
    .once ... 連続してイベントが発生するとき一度だけ発火
    .passive ... scrollイベントでイベントが停止されてもスクロール処理は動くようにする
    タグが入れ子になっている場合、上のタグ(id="in" e_event)にイベントを設定すると、下のタグにもイベントが伝えられる。
    <div id="out" class="out" v-on:click="a_event">A
      <div id="mid" class="mid" v-on:click="b_event">B
        <div id="in" class="in" v-on:click="c_event">C
        </div>
      </div>
    </div>