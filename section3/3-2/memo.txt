②変数をコンポーネントに渡す
v-modelちはinputの入力値をVueのdataプロパティの値にバインドする機能。
入力された値を変更すると、リアルタイムにバインドされた変数の値が更新される。


③v-on
イベント関係の属性に値をバインドするための専用のv属性
v-on:イベント名="…処理…"
v-on:click="…処理…"


④イベント処理を別途用意　クリックするとクラスを変更する
v-onを使った値では、コンポーネントに用意したメソッドを指定することができる
v-onの値にメソッドの名前を記述する
呼び出すメソッドはコンポーネントの「methods」ちおうプロパティに用意
methods: {
    名前( event ) {...},
    名前( event ) {...},
}
こうしてmethods内にまとめた「名前」をv-onの値として指定すると、その名前に設定されたメソッドが実行される
↓↓↓ハイフンを含むクラス名↓↓↓
v-bind:class="{\'alert-warning\':isInfo, \'alert-dark\':isDark}"
オブジェクトのキー名にハイフンを含む名前をそのまま指定することはできないため、alert-warningをテキストとして表示するためシングルクォートで囲む シングルクォート記号の書き方 → \'


⑥算術プロパティ…処理を実行できるプロパティ
要するに「計算できるプロパティ」
値をただ割り当てて表示するのではなく、あらかじめ用意した処理を実行して設定する
「compluted」というプロパティに用意する
computed: {
    名前( 引数 ) {...},
    名前( 引数 ) {...},
}

イベントと算術プロパティの違いは呼び出されるタイミング
イベント…ユーザーが操作するなどイベントが発生すると呼びだされる
算術プロパティ…「依存する値」が更新された時に実行　依存する値=関数の中で利用している値(this.mum)
算術プロパティの方が必要にして最小限の動作

⑦　ローカルコンポーネント
グローバルコンポーネント = component 　グローバル変数として設置され、スクリプトのどこからでも実行できる
プロジェクトを使って多数のmファイルを利用する場合、グローバル変数としてコンポーネントが設置されていると、常にそれらがすべてロードされて不便。

ローカルコンポーネント　= components 「Vue3のアプリケーション・オブジェクト内に組み込まれたコンポーネント」
components: {
    名前: {...},
    名前: {...},
}

ローカルコンポーネントの場合、Vue.componentメソッドは呼び出さない
ただcomponentsプロパティ内にオブジェクトを用意し、コンポーネント名を名前に指定して、設定情報となる値を用意しておくだけ
